version: 2.1
orbs:
  k8s: circleci/kubernetes@0.7.0
  slack: circleci/slack@3.4.2
commands:
  npm_install:
    description: "npm install"
    steps:
      - run:
          name: Install npm packages
          command: |
            npm ci
            npm run format
  build:
    description: "Build for release"
    steps:
      - run:
          name: Building application
          command: |
            npm run build
  tag:
    description: "Tag version"
    parameters:
      target_version:
        type: string
        default: "staging"
    steps:
      - run:
          name: Tag build
          command: echo "<< parameters.target_version >> $(date -u +'%Y-%m-%dT%H:%M:%SZ')" > build_version
  docker_build_push:
    description: "Build Docker image"
    parameters:
      docker_latest_image_tag:
        type: string
        default: "latest-staging"
      docker_image_tag:
        type: string
        default: ${CIRCLE_SHA1}
    steps:
      - setup_remote_docker
      - run:
          name: Building docker image
          command: |
            docker build -t ${DOCKHUB_ORGANISATION}/sinbad-software:<< parameters.docker_image_tag >> -t ${DOCKHUB_ORGANISATION}/sinbad-software:<< parameters.docker_latest_image_tag >> .
      - run:
          name: Pushing Image to docker hub
          command: |
            echo $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_USERNAME --password-stdin
            docker push ${DOCKHUB_ORGANISATION}/sinbad-software:<< parameters.docker_image_tag >>
            docker push ${DOCKHUB_ORGANISATION}/sinbad-software:<< parameters.docker_latest_image_tag >>
  k8s_deploy:
    description: "Deploy to k8s cluster"
    parameters:
      k8s_namespace:
        type: string
        default: "sinbad-software-staging"
      k8s_service:
        type: string
        default: "sinbad-software"
    steps:
      - k8s/install-kubectl
      - run:
          name: Deploying to k8s cluster to namespace << parameters.k8s_namespace >>
          command: |
            TAG=${CIRCLE_TAG:-$CIRCLE_SHA1}
            export NAMESPACE=<< parameters.k8s_namespace >>
            git clone https://github.com/binary-com/devops-ci-scripts
            cd devops-ci-scripts/k8s-build_tools
            echo $CA_CRT | base64 --decode > ca.crt
            ./release.sh << parameters.k8s_service >> ${TAG}
  notify_slack:
    description: "Notify slack"
    steps:
      - slack/status:
          include_project_field: false
          failure_message: "Release failed for sinbad-software with version *$(cat build_version)*"
          success_message: "Release succeeded for sinbad-software with version *$(cat build_version)*"
          webhook: ${SLACK_WEBHOOK}
jobs:
  test:
    docker:
      - image: cimg/node:18.4.0
    steps:
      - checkout
      - npm_install
  release_staging:
    docker:
      - image: cimg/node:18.4.0
    steps:
      - checkout
      - tag
      - npm_install
      - build
      - run:
          name: "Publish to cloudflare pages (staging)"
          command: |
            npm i wrangler@2.0.19
            cd public
            npx wrangler pages publish . --project-name=sinbad-pages --branch=staging
            echo "New staging website - http://staging.cf-pages-sinbad.deriv.com"
      - docker_build_push
      - k8s_deploy
      - notify_slack
  release_production:
    docker:
      - image: cimg/node:18.4.0
    steps:
      - checkout
      - npm_install
      - build
      - run:
          name: "Publish to cloudflare pages (production)"
          command: |
            npm i wrangler@2.0.19
            cd public
            npx wrangler pages publish . --project-name=sinbad-pages --branch=main
            echo "New website - http://cf-pages-sinbad.deriv.com"
      - tag:
          target_version: 'production'
      - docker_build_push:
          docker_latest_image_tag: latest
          docker_image_tag: ${CIRCLE_TAG}
      - k8s_deploy:
          k8s_namespace: "sinbad-software-production"
      - notify_slack
workflows:
  development:
    jobs:
      - test:
          filters:
            branches:
              ignore: /^master$/
  release:
    jobs:
      - release_staging:
          filters:
            branches:
              only: /^master$/
          context: binary-frontend-artifact-upload
      - release_production:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^production.*/
          context: binary-frontend-artifact-upload
